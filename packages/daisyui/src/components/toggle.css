.toggle {
  border: var(--border) solid currentColor;
  @apply text-base-content/50 inline-flex shrink-0 cursor-pointer appearance-none align-middle;
  border-radius: calc(var(--radius-selector) + var(--toggle-padding));
  padding: var(--toggle-padding);
  box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--gloss) * 10%), transparent) inset;
  transition: color 0.3s;
  --toggle-padding: 0.1875rem;
  --size: calc(var(--size-selector, 0.25rem) * 6);
  width: calc(var(--size) * 1.75);
  height: var(--size);
  &:before {
    @apply block h-full grow-0;
    content: "";
    transition: flex-grow 0.2s;
  }

  &:after {
    @apply rounded-selector relative start-0 block aspect-square h-full bg-current;
    translate: 0;
    content: "";
    transition:
      background-color 0.1s,
      translate 0.2s,
      inset-inline-start 0.2s;
    box-shadow:
      0 -1px oklch(0% 0 0 / calc(var(--gloss) * 0.1)) inset,
      0 8px 0 -4px oklch(100% 0 0 / calc(var(--gloss) * 0.1)) inset,
      0 1px color-mix(in oklab, currentColor calc(var(--gloss) * 10%), transparent);
    background-size: calc(var(--noise) * 1000px);
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise' x='0' y='0'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1' stitchTiles='stitch'/%3E%3CfeBlend mode='screen'/%3E%3C/filter%3E%3Crect width='1000' height='1000' filter='url(%23noise)' opacity='.1'/%3E%3C/svg%3E");
  }

  &:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }

  &:checked,
  &[aria-checked="true"] {
    @apply bg-base-100 text-base-content;

    &:before {
      @apply grow;
    }

    &:after {
      @apply bg-current;

      @starting-style {
        opacity: 0;
      }
    }
  }

  &:indeterminate {
    &:before {
      @apply grow-0;
    }

    &:after {
      @apply start-1/2;
      translate: -50% 0;
    }
  }

  &:disabled {
    @apply cursor-not-allowed opacity-30;

    &:after {
      @apply bg-transparent;
      border: var(--border) solid currentColor;
    }
  }
}

.toggle-primary {
  &:checked,
  &[aria-checked="true"] {
    @apply text-primary;
  }
}

.toggle-secondary {
  &:checked,
  &[aria-checked="true"] {
    @apply text-secondary;
  }
}

.toggle-accent {
  &:checked,
  &[aria-checked="true"] {
    @apply text-accent;
  }
}

.toggle-success {
  &:checked,
  &[aria-checked="true"] {
    @apply text-success;
  }
}

.toggle-warning {
  &:checked,
  &[aria-checked="true"] {
    @apply text-warning;
  }
}

.toggle-info {
  &:checked,
  &[aria-checked="true"] {
    @apply text-info;
  }
}

.toggle-error {
  &:checked,
  &[aria-checked="true"] {
    @apply text-error;
  }
}

/* responsive */

.toggle-xs {
  &:is([type="checkbox"]) {
    --toggle-padding: 0.0625rem;
    --size: calc(var(--size-selector, 0.25rem) * 4);
  }
}

.toggle-sm {
  &:is([type="checkbox"]) {
    --toggle-padding: 0.125rem;
    --size: calc(var(--size-selector, 0.25rem) * 5);
  }
}

.toggle-md {
  &:is([type="checkbox"]) {
    --toggle-padding: 0.1875rem;
    --size: calc(var(--size-selector, 0.25rem) * 6);
  }
}

.toggle-lg {
  &:is([type="checkbox"]) {
    --toggle-padding: 0.25rem;
    --size: calc(var(--size-selector, 0.25rem) * 7);
  }
}

.toggle-xl {
  &:is([type="checkbox"]) {
    --toggle-padding: 0.3125rem;
    --size: calc(var(--size-selector, 0.25rem) * 8);
  }
}
